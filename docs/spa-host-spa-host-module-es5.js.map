{"version":3,"sources":["webpack:///src/app/spa-host/spa-host.component.ts","webpack:///src/app/spa-host/spa-host.module.ts","webpack:///src/app/spa-host/spa-unmount.guard.ts","webpack:///src/services/single-spa.service.ts"],"names":["SpaHostComponent","singleSpaService","route","appName","snapshot","data","app","mount","subscribe","appContainerRef","nativeElement","unmount","selector","template","changeDetection","OnPush","routes","path","canDeactivate","component","SpaHostModule","forChild","declarations","imports","SpaUnmountGuard","currentRoute","currentState","nextState","currentApp","nextApp","extractAppDataFromRouteTree","root","pipe","_","routeFragment","children","length","map","r","find","providedIn","SingleSpaService","loadedParcels","domElement","System"],"mappings":"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","file":"spa-host-spa-host-module-es5.js","sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SingleSpaService } from '../../services/single-spa.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-spa-host',\n  template: '<div #appContainer></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpaHostComponent implements OnInit {\n\n  constructor(private singleSpaService: SingleSpaService, private route: ActivatedRoute) { }\n\n  @ViewChild('appContainer', { static: true })\n  appContainerRef: ElementRef;\n\n  appName: string;\n\n  ngOnInit() {\n    this.appName = this.route.snapshot.data.app;\n    this.mount().subscribe();\n  }\n\n  mount(): Observable<unknown> {\n    return this.singleSpaService.mount(this.appName, this.appContainerRef.nativeElement);\n  }\n\n  unmount(): Observable<unknown> {\n    return this.singleSpaService.unmount(this.appName);\n  }\n}\n","import { RouterModule, Routes } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SpaUnmountGuard } from './spa-unmount.guard';\nimport { SpaHostComponent } from './spa-host.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    canDeactivate: [SpaUnmountGuard],\n    component: SpaHostComponent,\n  },\n];\n\n@NgModule({\n  declarations: [SpaHostComponent],\n  imports: [CommonModule, RouterModule.forChild(routes)]\n})\nexport class SpaHostModule {}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SpaHostComponent } from './spa-host.component';\n\n@Injectable({ providedIn: 'root' })\nexport class SpaUnmountGuard implements CanDeactivate<SpaHostComponent> {\n  canDeactivate(\n    component: SpaHostComponent,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState: RouterStateSnapshot\n  ): boolean | Observable<boolean> {\n    const currentApp = component.appName;\n    const nextApp = this.extractAppDataFromRouteTree(nextState.root);\n\n    if (currentApp === nextApp) {\n      return true;\n    }\n\n    return component.unmount().pipe(map(_ => true));\n  }\n\n  private extractAppDataFromRouteTree(routeFragment: ActivatedRouteSnapshot): string {\n    if (routeFragment.data && routeFragment.data.app) {\n      return routeFragment.data.app;\n    }\n\n    if (!routeFragment.children.length) {\n      return null;\n    }\n\n    return routeFragment.children.map(r => this.extractAppDataFromRouteTree(r)).find(r => r !== null);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { mountRootParcel, Parcel, ParcelConfig } from 'single-spa';\nimport { Observable, from } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SingleSpaService {\n  private loadedParcels: {\n    [appName: string]: Parcel;\n  } = {};\n\n  mount(appName: string, domElement: HTMLElement): Observable<unknown> {\n    return from(System.import<ParcelConfig>(appName)).pipe(\n      tap((app: ParcelConfig) => {\n        this.loadedParcels[appName] = mountRootParcel(app, {\n          domElement\n        });\n      })\n    );\n  }\n\n  unmount(appName: string): Observable<unknown> {\n    return from(this.loadedParcels[appName].unmount()).pipe(\n      tap(() => delete this.loadedParcels[appName])\n    );\n  }\n}\n"]}