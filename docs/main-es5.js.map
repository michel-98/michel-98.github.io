{"version":3,"sources":["webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/services/route-reuse-strategy.ts"],"names":["routes","path","children","loadChildren","then","m","SpaHostModule","data","app","AppRoutingModule","forRoot","imports","exports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","declarations","providers","bootstrap","environment","production","appId","bootstrapModule","module","isInAngularZone","window","Zone","current","_properties","rootPlatformLocation","injector","get","rootZone","setNgZone","err","console","error","MicroFrontendRouteReuseStrategy","future","curr","routeConfig"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [{\n  path: 'child1',\n  children: [{\n    path: '**',\n    loadChildren: () => import('./spa-host/spa-host.module').then(m => m.SpaHostModule),\n    data: { app: 'child1' }\n  }]\n}, {\n  path: 'child2',\n  children: [{\n    path: '**',\n    loadChildren: () => import('./spa-host/spa-host.module').then(m => m.SpaHostModule),\n    data: { app: 'child2' }\n  }]\n}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'container';\n}\n","<!--The content below is only a placeholder and can be replaced.-->\n<div style=\"text-align:center\">\n  <h1>\n    Welcome to {{ title }}!\n  </h1>\n</div>\n\n<main>\n    <ul>\n      <li><h2><a routerLink=\"/child1\">Child 1</a></h2></li>\n      <li><h2><a routerLink=\"/child2\">Child 2</a></h2></li>\n    </ul>\n    <section class=\"child-app\">\n        <router-outlet></router-outlet>\n    </section>\n</main>\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SpaHostComponent } from './spa-host/spa-host.component';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { MicroFrontendRouteReuseStrategy } from 'src/services/route-reuse-strategy';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [{\n    provide: RouteReuseStrategy,\n    useClass: MicroFrontendRouteReuseStrategy\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode, NgZone } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { start as singleSpaStart } from 'single-spa';\nimport { getSingleSpaExtraProviders } from 'single-spa-angular';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { PlatformLocation } from '@angular/common';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nsingleSpaStart();\n\nconst appId = 'container-app';\n\n\nplatformBrowserDynamic(getSingleSpaExtraProviders()).bootstrapModule(AppModule)\n  .then(module => {\n    NgZone.isInAngularZone = () => {\n      // @ts-ignore\n      return window.Zone.current._properties[appId] === true;\n    };\n\n    const rootPlatformLocation = module.injector.get(PlatformLocation) as any;\n    const rootZone = module.injector.get(NgZone);\n\n    // tslint:disable-next-line:no-string-literal\n    rootZone['_inner']._properties[appId] = true;\n    rootPlatformLocation.setNgZone(rootZone);\n  })\n  .catch(err => console.error(err));\n","import { RouteReuseStrategy, ActivatedRouteSnapshot, DetachedRouteHandle } from '@angular/router';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MicroFrontendRouteReuseStrategy extends RouteReuseStrategy {\n  shouldDetach(): boolean {\n    return false;\n  }\n\n  store(): void { }\n\n  shouldAttach(): boolean {\n    return false;\n  }\n\n  retrieve(): DetachedRouteHandle {\n    return null;\n  }\n\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    /// If a child app routes inside of itself, this app will interpret that as a route change.\n    ///\n    /// By default, this will result in the current component being destroyed and replaced with a new instance\n    /// of the same spa-host component.\n    ///\n    /// This route reuse strategy looks at the routeData.app to determine if the new route should be\n    /// treated as the exact same route as the previous, ensuring we don't remount a child app when said child app\n    /// routes inside of itself.\n\n    return future.routeConfig === curr.routeConfig || (future.data.app && (future.data.app === curr.data.app));\n  }\n}\n"]}