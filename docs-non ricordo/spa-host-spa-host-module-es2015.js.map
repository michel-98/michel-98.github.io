{"version":3,"sources":["./src/app/spa-host/spa-host.component.ts","./src/app/spa-host/spa-host.module.ts","./src/app/spa-host/spa-unmount.guard.ts","./src/services/single-spa.service.ts"],"names":[],"mappings":"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","file":"spa-host-spa-host-module-es2015.js","sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SingleSpaService } from '../../services/single-spa.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-spa-host',\n  template: '<div #appContainer></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpaHostComponent implements OnInit {\n\n  constructor(private singleSpaService: SingleSpaService, private route: ActivatedRoute) { }\n\n  @ViewChild('appContainer', { static: true })\n  appContainerRef: ElementRef;\n\n  appName: string;\n\n  ngOnInit() {\n    this.appName = this.route.snapshot.data.app;\n    this.mount().subscribe();\n  }\n\n  mount(): Observable<unknown> {\n    return this.singleSpaService.mount(this.appName, this.appContainerRef.nativeElement);\n  }\n\n  unmount(): Observable<unknown> {\n    return this.singleSpaService.unmount(this.appName);\n  }\n}\n","import { RouterModule, Routes } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SpaUnmountGuard } from './spa-unmount.guard';\nimport { SpaHostComponent } from './spa-host.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    canDeactivate: [SpaUnmountGuard],\n    component: SpaHostComponent,\n  },\n];\n\n@NgModule({\n  declarations: [SpaHostComponent],\n  imports: [CommonModule, RouterModule.forChild(routes)]\n})\nexport class SpaHostModule {}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SpaHostComponent } from './spa-host.component';\n\n@Injectable({ providedIn: 'root' })\nexport class SpaUnmountGuard implements CanDeactivate<SpaHostComponent> {\n  canDeactivate(\n    component: SpaHostComponent,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState: RouterStateSnapshot\n  ): boolean | Observable<boolean> {\n    const currentApp = component.appName;\n    const nextApp = this.extractAppDataFromRouteTree(nextState.root);\n\n    if (currentApp === nextApp) {\n      return true;\n    }\n\n    return component.unmount().pipe(map(_ => true));\n  }\n\n  private extractAppDataFromRouteTree(routeFragment: ActivatedRouteSnapshot): string {\n    if (routeFragment.data && routeFragment.data.app) {\n      return routeFragment.data.app;\n    }\n\n    if (!routeFragment.children.length) {\n      return null;\n    }\n\n    return routeFragment.children.map(r => this.extractAppDataFromRouteTree(r)).find(r => r !== null);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { mountRootParcel, Parcel, ParcelConfig } from 'single-spa';\nimport { Observable, from } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SingleSpaService {\n  private loadedParcels: {\n    [appName: string]: Parcel;\n  } = {};\n\n  mount(appName: string, domElement: HTMLElement): Observable<unknown> {\n    return from(System.import<ParcelConfig>(appName)).pipe(\n      tap((app: ParcelConfig) => {\n        this.loadedParcels[appName] = mountRootParcel(app, {\n          domElement\n        });\n      })\n    );\n  }\n\n  unmount(appName: string): Observable<unknown> {\n    return from(this.loadedParcels[appName].unmount()).pipe(\n      tap(() => delete this.loadedParcels[appName])\n    );\n  }\n}\n"],"sourceRoot":"webpack:///"}